ses,
abilita,  # opzionale: scala in stile QI
logit_fumo,
fumatore = factor(fumatore, labels = c("no", "sì"))
)
# Controllo delle correlazioni
round(cor(df[, 1:4]), 2)
t.test(abilita ~ fumatore, df = df)
head(df)
# senza aggiustamento
m1 <- lm(abilita ~ fumatore, data = df)
summary(m1)
# aggiustamento additivo
m2 <- update(m1, . ~ . + ses + eta, data = df)
summary(m2)
m3 <- glm(fumatore ~ ses + eta, data = df, family = binomial())
ps <- exp(predict(m3))/(1+exp(predict(m3)))
iptw <- ifelse(df$fumatore == "sì", 1/ps, 1/(1-ps))
# solo ps
m4 <- lm(abilita ~ fumatore, weights =  iptw, data = df)
summary(m4)
# additivo e ps
m5 <- update(m4,.  ~ . + ses + eta, data = df)
summary(m5)
BIC(m2,m4,m5)
AIC(m2,m4,m5)
car::compareCoefs(m1,m2,m5,m5)
set.seed(123)
library(MASS)
n <- 100
eff_fum <- 0.5
# Matrice di correlazione desiderata
cor_mat <- matrix(c(
1.00,  0.00, -0.30,  0.20,  # eta
0.00,  1.00,  0.30,  -0.30,  # status socio-economico
-0.30,  0.30,  1.00,  eff_fum,  # abilità
0.20,  -0.30,  eff_fum,  1.00   # logit fumo
), nrow = 4, byrow = TRUE)
# Nomi delle variabili
colnames(cor_mat) <- rownames(cor_mat) <- c("eta", "ses", "abilita", "logit_fumo")
# Simulazione
df <- mvrnorm(n, mu = rep(0, 4), Sigma = cor_mat, empirical = T)
# Estrai variabili
eta           <- df[, "eta"]
ses           <- df[, "ses"]
abilita       <- df[, "abilita"]
logit_fumo    <- df[, "logit_fumo"]
# Trasforma logit in probabilità di fumare
p_fumo   <- 1 / (1 + exp(-logit_fumo))
fumatore <- rbinom(n, size = 1, prob = p_fumo)
# Costruisci il dataset finale
df <- data.frame(
eta,
ses,
abilita,  # opzionale: scala in stile QI
logit_fumo,
fumatore = factor(fumatore, labels = c("no", "sì"))
)
# Controllo delle correlazioni
round(cor(df[, 1:4]), 2)
t.test(abilita ~ fumatore, df = df)
head(df)
# senza aggiustamento
m1 <- lm(abilita ~ fumatore, data = df)
summary(m1)
# aggiustamento additivo
m2 <- update(m1, . ~ . + ses + eta, data = df)
summary(m2)
m3 <- glm(fumatore ~ ses + eta, data = df, family = binomial())
ps <- exp(predict(m3))/(1+exp(predict(m3)))
iptw <- ifelse(df$fumatore == "sì", 1/ps, 1/(1-ps))
# solo ps
m4 <- lm(abilita ~ fumatore, weights =  iptw, data = df)
summary(m4)
# additivo e ps
m5 <- update(m4,.  ~ . + ses + eta, data = df)
summary(m5)
BIC(m2,m4,m5)
AIC(m2,m4,m5)
car::compareCoefs(m1,m2,m5,m5)
set.seed(123)
library(MASS)
n <- 100
eff_fum <- 0.5
# Matrice di correlazione desiderata
cor_mat <- matrix(c(
1.00,  0.00, -0.30,  0.20,  # eta
0.00,  1.00,  0.30,  -0.30,  # status socio-economico
-0.30,  0.30,  1.00,  eff_fum,  # abilità
0.20,  -0.30,  eff_fum,  1.00   # logit fumo
), nrow = 4, byrow = TRUE)
# Nomi delle variabili
colnames(cor_mat) <- rownames(cor_mat) <- c("eta", "ses", "abilita", "logit_fumo")
# Simulazione
df <- mvrnorm(n, mu = rep(0, 4), Sigma = cor_mat, empirical = T)
# Estrai variabili
eta           <- df[, "eta"]
ses           <- df[, "ses"]
abilita       <- df[, "abilita"]
logit_fumo    <- df[, "logit_fumo"]
# Trasforma logit in probabilità di fumare
p_fumo   <- 1 / (1 + exp(-logit_fumo))
fumatore <- rbinom(n, size = 1, prob = p_fumo)
# Costruisci il dataset finale
df <- data.frame(
eta,
ses,
abilita,  # opzionale: scala in stile QI
logit_fumo,
fumatore = factor(fumatore, labels = c("no", "sì"))
)
# Controllo delle correlazioni
round(cor(df[, 1:4]), 2)
t.test(abilita ~ fumatore, df = df)
head(df)
# senza aggiustamento
m1 <- lm(abilita ~ fumatore, data = df)
summary(m1)
# aggiustamento additivo
m2 <- update(m1, . ~ . + ses + eta, data = df)
summary(m2)
m3 <- glm(fumatore ~ ses + eta, data = df, family = binomial())
ps <- exp(predict(m3))/(1+exp(predict(m3)))
iptw <- ifelse(df$fumatore == "sì", 1/ps, 1/(1-ps))
# solo ps
m4 <- lm(abilita ~ fumatore, weights =  iptw, data = df)
summary(m4)
# additivo e ps
m5 <- update(m4,.  ~ . + ses + eta, data = df)
summary(m5)
BIC(m2,m4,m5)
AIC(m2,m4,m5)
car::compareCoefs(m1,m2,m4,m5)
set.seed(123)
library(MASS)
n <- 100
eff_fum <- 0.5
# Matrice di correlazione desiderata
cor_mat <- matrix(c(
1.00,  0.00, -0.30,  0.20,  # eta
0.00,  1.00,  0.30,  -0.30,  # status socio-economico
-0.30,  0.30,  1.00,  eff_fum,  # abilità
0.20,  -0.30,  eff_fum,  1.00   # logit fumo
), nrow = 4, byrow = TRUE)
# Nomi delle variabili
colnames(cor_mat) <- rownames(cor_mat) <- c("eta", "ses", "abilita", "logit_fumo")
# Simulazione
df <- mvrnorm(n, mu = rep(0, 4), Sigma = cor_mat, empirical = T)
# Estrai variabili
eta           <- df[, "eta"]
ses           <- df[, "ses"]
abilita       <- df[, "abilita"]
logit_fumo    <- df[, "logit_fumo"]
# Trasforma logit in probabilità di fumare
p_fumo   <- 1 / (1 + exp(-logit_fumo))
fumatore <- rbinom(n, size = 1, prob = p_fumo)
# Costruisci il dataset finale
df <- data.frame(
eta,
ses,
abilita,  # opzionale: scala in stile QI
logit_fumo,
fumatore = factor(fumatore, labels = c("no", "sì"))
)
# Controllo delle correlazioni
round(cor(df[, 1:4]), 2)
t.test(abilita ~ fumatore, df = df)
head(df)
# senza aggiustamento
m1 <- lm(abilita ~ fumatore, data = df)
summary(m1)
# aggiustamento additivo
m2 <- update(m1, . ~ . + ses + eta, data = df)
summary(m2)
m <- glm(fumatore ~ ses + eta, data = df, family = binomial())
ps <- exp(predict(m3))/(1+exp(predict(m3)))
iptw <- ifelse(df$fumatore == "sì", 1/ps, 1/(1-ps))
# solo ps
m3 <- lm(abilita ~ fumatore, weights =  iptw, data = df)
summary(m3)
# additivo e ps
m4 <- update(m3,.  ~ . + ses + eta, data = df)
summary(m4)
BIC(m2,m3,m4)
AIC(m2,m3,m4)
car::compareCoefs(m1,m2,m4,m5)
rm(list = ls())
library(future.apply)
install.packages("future.apply")
rm(list = ls())
library(future.apply)
library(tidyverse)
install.packages("tidyverse")
rm(list = ls())
library(future.apply)
library(tidyverse)
# Set up parallel backend
plan(multisession, workers = parallel::detectCores() - 2)
# Run simulations
set.seed(1234)
simulate_100 = function(i, n, eff_fum_abi, eff_ses_abi, eff_ses_fum ) {
results = tibble()  # Inizializza dataframe vuoto
for (j in 1:100) {  # Ogni worker fa 100 simulazioni
n = n
ses = rnorm(n, 0, 1)
# Define the effects
eff_fum_abi = eff_fum_abi
eff_ses_abi = eff_ses_abi
eff_ses_fum = eff_ses_fum
# Transform logit into probabilities
logit_fumo = 0 + ses * eff_ses_fum + rnorm(n,0,1)
# Calculate the probability of smoking
p_fumo = 1 / (1 + exp(-logit_fumo))
fumatore = rbinom(n, size = 1, prob = p_fumo)
# Calculate the probability of ability
logit_abi = 0 + fumatore * eff_fum_abi +  ses * eff_ses_abi + rnorm(n,0,1)
p_abi = 1 / (1 + exp(-logit_abi))
abilita = rbinom(n, size = 1, prob = p_abi)
# Create the dataframe
df = data.frame(
ses = ses,
fumatore = fumatore,
abilita = abilita
)
# Fit the propensity score model
mprop = glm(fumatore ~ ses, data = df, family = binomial())
# Calculate the propensity scores
df$ps = predict(mprop, type = "response")
df$iptw=ifelse(df$fumatore == 1, 1/df$ps, 1/(1-df$ps))
# Fit the model for 'abilita' without any adjust
m1 = glm(abilita ~ fumatore, data = df, family = binomial())
m1_pval = summary(m1)$coefficients[2,4]
# Fit the model for 'abilita' with covariates 'ses'
m2 = update(m1, . ~ . + ses, data = df)
m2_pval = summary(m2)$coefficients[2,4]
# Errore!!
# Fit the model for 'abilita' with IPTW weights -
m3_binom = glm(abilita ~ fumatore, weights = iptw, data = df, family = binomial())
m3_binom_pval = summary(m3_binom)$coefficients[2,4]
# Fit the model for 'abilita' with IPTW weights and additional covariates
m4_binom = update(m3_binom, . ~ . + ses, data = df)
m4_binom_pval = summary(m4_binom)$coefficients[2,4]
# Errore!!
# Fit the model for 'abilita' with IPTW weights -
m3_quasibinom = glm(abilita ~ fumatore, weights = iptw, data = df, family = quasibinomial())
m3_quasibinom_pval = summary(m3_quasibinom)$coefficients[2,4]
# Fit the model for 'abilita' with IPTW weights and additional covariates
m4_quasibinom = update(m3_quasibinom, . ~ . + ses, data = df)
m4_quasibinom_pval = summary(m4_quasibinom)$coefficients[2,4]
# Store results
results <- bind_rows(results,tibble(m1_pval, m2_pval,
m3_binom_pval, m4_binom_pval,
m3_quasibinom_pval, m4_quasibinom_pval))
}
return(results)
}
# Set values
n = 100
eff_fum_abi = 0
eff_ses_abi = .4
eff_ses_fum = -.3
# Run simulations in parallel
n_cores = parallel::detectCores() - 2
star = Sys.time()
results = future_lapply(1:n_cores, function(i) simulate_100(i, n,
eff_fum_abi = eff_fum_abi,
eff_ses_abi = eff_ses_abi,
eff_ses_fum = eff_ses_fum),
future.seed = TRUE)
stp = Sys.time()
stp-star
# Stop parallel backend
plan(sequential)
# Results
results_df=bind_rows(results)
apply(results_df, MARGIN = 2, FUN = function(x) mean(x < 0.05))
rm(list = ls())
library(future.apply)
library(tidyverse)
# Set up parallel backend
plan(multisession, workers = parallel::detectCores() - 2)
# Run simulations
set.seed(1234)
simulate_100 = function(i, n, eff_fum_abi, eff_ses_abi, eff_ses_fum ) {
results = tibble()  # Inizializza dataframe vuoto
for (j in 1:100) {  # Ogni worker fa 100 simulazioni
n = n
ses = rnorm(n, 0, 1)
# Define the effects
eff_fum_abi = eff_fum_abi
eff_ses_abi = eff_ses_abi
eff_ses_fum = eff_ses_fum
# Transform logit into probabilities
logit_fumo = 0 + ses * eff_ses_fum + rnorm(n,0,1)
# Calculate the probability of smoking
p_fumo = 1 / (1 + exp(-logit_fumo))
fumatore = rbinom(n, size = 1, prob = p_fumo)
# Calculate the probability of ability
logit_abi = 0 + fumatore * eff_fum_abi +  ses * eff_ses_abi + rnorm(n,0,1)
p_abi = 1 / (1 + exp(-logit_abi))
abilita = rbinom(n, size = 1, prob = p_abi)
# Create the dataframe
df = data.frame(
ses = ses,
fumatore = fumatore,
abilita = abilita
)
# Fit the propensity score model
mprop = glm(fumatore ~ ses, data = df, family = binomial())
# Calculate the propensity scores
df$ps = predict(mprop, type = "response")
df$iptw=ifelse(df$fumatore == 1, 1/df$ps, 1/(1-df$ps))
# Fit the model for 'abilita' without any adjust
m1 = glm(abilita ~ fumatore, data = df, family = binomial())
m1_pval = summary(m1)$coefficients[2,4]
# Fit the model for 'abilita' with covariates 'ses'
m2 = update(m1, . ~ . + ses, data = df)
m2_pval = summary(m2)$coefficients[2,4]
# Fit the model for 'abilita' with IPTW weights and additional covariates
m4_binom = update(m3_binom, . ~ . + ses, data = df)
rm(list = ls())
rm(list = ls())
library(future.apply)
library(tidyverse)
# Set up parallel backend
plan(multisession, workers = parallel::detectCores() - 2)
# Run simulations
set.seed(1234)
simulate_100 = function(i, n, eff_fum_abi, eff_ses_abi, eff_ses_fum ) {
results = tibble()  # Inizializza dataframe vuoto
for (j in 1:100) {  # Ogni worker fa 100 simulazioni
n = n
ses = rnorm(n, 0, 1)
# Define the effects
eff_fum_abi = eff_fum_abi
eff_ses_abi = eff_ses_abi
eff_ses_fum = eff_ses_fum
# Transform logit into probabilities
logit_fumo = 0 + ses * eff_ses_fum + rnorm(n,0,1)
# Calculate the probability of smoking
p_fumo = 1 / (1 + exp(-logit_fumo))
fumatore = rbinom(n, size = 1, prob = p_fumo)
# Calculate the probability of ability
logit_abi = 0 + fumatore * eff_fum_abi +  ses * eff_ses_abi + rnorm(n,0,1)
p_abi = 1 / (1 + exp(-logit_abi))
abilita = rbinom(n, size = 1, prob = p_abi)
# Create the dataframe
df = data.frame(
ses = ses,
fumatore = fumatore,
abilita = abilita
)
# Fit the propensity score model
mprop = glm(fumatore ~ ses, data = df, family = binomial())
# Calculate the propensity scores
df$ps = predict(mprop, type = "response")
df$iptw=ifelse(df$fumatore == 1, 1/df$ps, 1/(1-df$ps))
# Fit the model for 'abilita' without any adjust
m1 = glm(abilita ~ fumatore, data = df, family = binomial())
m1_pval = summary(m1)$coefficients[2,4]
# Fit the model for 'abilita' with covariates 'ses'
m2 = update(m1, . ~ . + ses, data = df)
m2_pval = summary(m2)$coefficients[2,4]
# Errore!!
# Fit the model for 'abilita' with IPTW weights -
m3_binom = glm(abilita ~ fumatore, weights = iptw, data = df, family = binomial())
m3_binom_pval = summary(m3_binom)$coefficients[2,4]
# Fit the model for 'abilita' with IPTW weights and additional covariates
m4_binom = update(m3_binom, . ~ . + ses, data = df)
m4_binom_pval = summary(m4_binom)$coefficients[2,4]
# Errore!!
# Fit the model for 'abilita' with IPTW weights -
m3_quasibinom = glm(abilita ~ fumatore, weights = iptw, data = df, family = quasibinomial())
m3_quasibinom_pval = summary(m3_quasibinom)$coefficients[2,4]
# Fit the model for 'abilita' with IPTW weights and additional covariates
m4_quasibinom = update(m3_quasibinom, . ~ . + ses, data = df)
m4_quasibinom_pval = summary(m4_quasibinom)$coefficients[2,4]
# Store results
results <- bind_rows(results,tibble(m1_pval, m2_pval,
m3_binom_pval, m4_binom_pval,
m3_quasibinom_pval, m4_quasibinom_pval))
}
return(results)
}
# Set values
n = 100
eff_fum_abi = 0
eff_ses_abi = .4
eff_ses_fum = -.3
# Run simulations in parallel
n_cores = parallel::detectCores() - 2
star = Sys.time()
results = future_lapply(1:n_cores, function(i) simulate_100(i, n,
eff_fum_abi = eff_fum_abi,
eff_ses_abi = eff_ses_abi,
eff_ses_fum = eff_ses_fum),
future.seed = TRUE)
stp = Sys.time()
stp-star
# Stop parallel backend
plan(sequential)
# Results
results_df=bind_rows(results)
apply(results_df, MARGIN = 2, FUN = function(x) mean(x < 0.05))
rm(list = ls())
library(future.apply)
library(tidyverse)
# Set up parallel backend
plan(multisession, workers = parallel::detectCores() - 2)
# Run simulations
set.seed(1234)
simulate_100 = function(i, n, eff_fum_abi, eff_ses_abi, eff_ses_fum ) {
results = tibble()  # Inizializza dataframe vuoto
for (j in 1:100) {  # Ogni worker fa 100 simulazioni
n = n
ses = rnorm(n, 0, 1)
# Define the effects
eff_fum_abi = eff_fum_abi
eff_ses_abi = eff_ses_abi
eff_ses_fum = eff_ses_fum
# Transform logit into probabilities
logit_fumo = 0 + ses * eff_ses_fum + rnorm(n,0,1)
# Calculate the probability of smoking
p_fumo = 1 / (1 + exp(-logit_fumo))
fumatore = rbinom(n, size = 1, prob = p_fumo)
# Calculate the probability of ability
logit_abi = 0 + fumatore * eff_fum_abi +  ses * eff_ses_abi + rnorm(n,0,1)
p_abi = 1 / (1 + exp(-logit_abi))
abilita = rbinom(n, size = 1, prob = p_abi)
# Create the dataframe
df = data.frame(
ses = ses,
fumatore = fumatore,
abilita = abilita
)
# Fit the propensity score model
mprop = glm(fumatore ~ ses, data = df, family = binomial())
# Calculate the propensity scores
df$ps = predict(mprop, type = "response")
df$iptw=ifelse(df$fumatore == 1, 1/df$ps, 1/(1-df$ps))
# Fit the model for 'abilita' without any adjust
m1 = glm(abilita ~ fumatore, data = df, family = binomial())
m1_pval = summary(m1)$coefficients[2,4]
# Fit the model for 'abilita' with covariates 'ses'
m2 = update(m1, . ~ . + ses, data = df)
m2_pval = summary(m2)$coefficients[2,4]
# Errore!!
# Fit the model for 'abilita' with IPTW weights -
m3_binom = glm(abilita ~ fumatore, weights = iptw, data = df, family = binomial())
m3_binom_pval = summary(m3_binom)$coefficients[2,4]
# Fit the model for 'abilita' with IPTW weights and additional covariates
m4_binom = update(m3_binom, . ~ . + ses, data = df)
m4_binom_pval = summary(m4_binom)$coefficients[2,4]
# Errore!!
# Fit the model for 'abilita' with IPTW weights -
m3_quasibinom = glm(abilita ~ fumatore, weights = iptw, data = df, family = quasibinomial())
m3_quasibinom_pval = summary(m3_quasibinom)$coefficients[2,4]
# Fit the model for 'abilita' with IPTW weights and additional covariates
m4_quasibinom = update(m3_quasibinom, . ~ . + ses, data = df)
m4_quasibinom_pval = summary(m4_quasibinom)$coefficients[2,4]
# Store results
results <- bind_rows(results,tibble(m1_pval, m2_pval,
m3_binom_pval, m4_binom_pval,
m3_quasibinom_pval, m4_quasibinom_pval))
}
return(results)
}
# Set values
n = 100
eff_fum_abi = 0
eff_ses_abi = .4
eff_fum_abi = 0.5
eff_ses_abi = .4
eff_ses_fum = -.3
# Run simulations in parallel
n_cores = parallel::detectCores() - 2
star = Sys.time()
results = future_lapply(1:n_cores, function(i) simulate_100(i, n,
eff_fum_abi = eff_fum_abi,
eff_ses_abi = eff_ses_abi,
eff_ses_fum = eff_ses_fum),
future.seed = TRUE)
stp = Sys.time()
stp-star
# Stop parallel backend
plan(sequential)
# Results
results_df=bind_rows(results)
apply(results_df, MARGIN = 2, FUN = function(x) mean(x < 0.05))
#######################################
rm(list = ls())
N = 1e5
z = rnorm(N,0,1)
x = round(pnorm(rnorm(N,0,1) + 0.7*z))
y = rnorm(N,0,1) + 0.4*x + 0.0*z
fit = lm(y ~ x)
summary(fit)
fit = lm(y ~ x + z)
summary(fit)
fitPs = glm(x ~ z, family=binomial(link="logit"))
pred = predict(fitPs,type="response")
pred[x==1] = 1/pred[x==1]
pred[x==0] = 1/(1-pred[x==0])
fit0 = lm(y ~ x)
summary(fit1)
fit1 = lm(y ~ x, weights = pred)
summary(fit1)
fit2 = lm(y ~ x + z, weights = pred)
summary(fit2)
fit3 = lm(y ~ x + z)
summary(fit3)
car::compareCoefs(fit0,fit1,fit2,fit3)
